/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_zelos_jniCErrorRegister */
#include <android/log.h>
#include <signal.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>

#include "jniCErrorRegister.h"

#ifdef __cplusplus
extern "C" {
#endif

sig_t oldHandler = 0;
const char *flagfullpath = 0;

void crashHandler(int signal) {
	__android_log_print(ANDROID_LOG_INFO, "CERROR","C Error Register %s","catch dead signal");

	//write a flag
	int fileHandler=open(flagfullpath,O_CREAT|O_WRONLY);
	if (-1==fileHandler) {
		__android_log_print(ANDROID_LOG_INFO, "CERROR","C Error Register open %s failed : %s", flagfullpath, strerror(errno));
		goto end;
	}
	if (-1==close(fileHandler)) {
		__android_log_print(ANDROID_LOG_INFO, "CERROR","C Error Register close %s failed : %s",flagfullpath, strerror(errno));
		goto end;
	}
end:
	//this function must be called
	oldHandler(signal);
}

/*
 * Class:     com_billionav_supsys_jniCErrorRegister
 * Method:    registSignal
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_billionav_supsys_jniCErrorRegister_registSignal
  (JNIEnv *env, jclass cls, jstring flagpath){
	__android_log_print(ANDROID_LOG_INFO, "CERROR","C Error Register %s","is ok");

	jboolean isCopy=1;
	//for this is used when the applcation start ,and will never released 
	//unless the application end , so do not release it
	flagfullpath=env->GetStringUTFChars(flagpath, NULL);

	oldHandler = signal(SIGSEGV, crashHandler);

}



#ifdef __cplusplus
}
#endif
